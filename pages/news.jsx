import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import axios from 'axios'
import cheerio from 'cheerio'
import MenuBar from '../components/MenuBar/index'
import { NavBar } from '../styles/pages/LandingPage'
import TeamListBar from '../components/TeamListBar'
import Frame from '../components/Frame'
import LoadingPage from '../components/LoadingPage'
import { useEffect, useState } from 'react'

export default function News (props) {
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    if (props.news.length > 0) {
      setIsLoading(false)
    }
  }, [props.news])

  if (isLoading) {
    return <LoadingPage />
  } else {
    return (
      <div>
        <Head>
          <title>NBA-App</title>
          <link rel='icon' href='/Logo-NBA.png' />
          <meta
            name='description'
            content='Generated by create next app'
          />
        </Head>
        <NavBar>
          <Link href='/'>
            <Image src='/app-logo/Logo-NBA.png' width={100} height={57} alt='logoNBA' priority />
          </Link>
          <MenuBar teamName='Logo-NBA' />
        </NavBar>
        <TeamListBar />
        <Frame
          teamName='NEWS'
          news={props.news}
          imagesUrls={props.imagesUrls}
        />
      </div>
    )
  }
}

async function getImageUrl (url) {
  const { data } = await axios.get(url)
  const $ = cheerio.load(data)
  return $('.ArticleContent_article__NBhQ8 img').attr('src')
}

export async function getStaticProps () {
  const headersList = {
    Accept: '*/*',
    'User-Agent': 'Thunder Client (https://www.thunderclient.com)',
    'X-RapidAPI-Key': '8acd110f16msh8ab908907b8a392p1b1f53jsn59199f328434'
  }
  const response = await fetch('https://nba-latest-news.p.rapidapi.com/articles?source=nba', {
    method: 'GET',
    headers: headersList
  })
  const news = await response.json()

  const imagesUrls = []
  const defaultImageUrl = 'defaultImage.jpg'
  for (const newsItem of news) {
    const imageUrl = await getImageUrl(newsItem.url)
    if (imageUrl) {
      imagesUrls.push(imageUrl)
    } else {
      imagesUrls.push(defaultImageUrl)
    }
  }

  return {
    props: { news, imagesUrls, isLoading: true },
    revalidate: 10 // rerun after 10 seconds
  }
}
